//complexity: O(n)

class Solution {
public:
    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> m;
        int currSum=0;
        int count=0;
        m[0]++; // to take into account those subarrays that begin with index 0
        for(int i=0; i<nums.size(); i++)
        {
            currSum = currSum + nums[i];
            auto it = m.find(currSum-k);
            if(it!= m.end())
                count+= it->second;
            m[currSum]++;
        }
        return count;
    }
};