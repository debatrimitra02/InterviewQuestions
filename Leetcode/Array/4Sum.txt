/*

Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.
*/

  class Solution{ //using hashtable, avg O(n^3)

public:

    vector<vector<int> > fourSum(vector<int> &num, int target){
        vector<vector<int> > vvi;
        int n = num.size();
        if(n < 4) return  vvi;
        
        sort(num.begin(), num.end());      //nlogn  
        unordered_map<int, vector<pair<int, int>> > mp;
        //n^2
        for(int i = 0; i < n; i++)
        {
            for(int j = i + 1; j < n; j++)
            {
                mp[num[i]+num[j]].push_back(make_pair(i,j));
            }
        }
        
        for(int i = 0; i < n; i++)
        {
            if(i>0 && num[i] == num[i-1]) continue;
            for(int j = i + 1; j < n; j++){
                if(j > i + 1 && num[j] == num[j-1]) continue;
                int res = target - num[i] - num[j];
                if(mp.count(res)){
                    for(auto it = mp[res].begin(); it != mp[res].end(); it++){
                        int k = (*it).first, l = (*it).second;
                        if(k > j){ // k>j make sure that the second pair has bigger values than the first pair.
                            if(!vvi.empty() && num[i]==vvi.back()[0] && num[j]==vvi.back()[1]
                            && num[k]==vvi.back()[2] && num[l] == vvi.back()[3]){
                                continue; //if the obtained 4 elements are the same as previous one continue to next
                            }
                            vector<int> vi={num[i], num[j], num[k], num[l]};
                            vvi.push_back(vi);
                        } // if k>j
                        
                    }//for it
                }//if
            }// forj
        }//for i
        return vvi;
    }
  };



////////////Alternative Solution//////////////////////////////////

class Solution {
public:
    struct PairSum
    {
        int sum;
        int firstIndex;
        int secondIndex;
    };
    
    static int compare (const void *a, const void * b)
    {
        return ( (*(PairSum *)a).sum - (*(PairSum*)b).sum );
    }
    
    bool noCommon(struct PairSum a, struct PairSum b)
    {
        if (a.firstIndex == b.firstIndex || a.firstIndex == b.secondIndex ||
                a.secondIndex == b.firstIndex || a.secondIndex == b.secondIndex)
            return false;
        return true;
    }
    
	vector<vector<int>> fourSum(vector<int>& nums, int target) {
		
		vector<vector<int>> res;
		if(nums.size()<4)
		    return res;
		if(nums.size() == 0)
            return res;
        int n = nums.size();
        int size = (n*(n-1))/2;
        sort(nums.begin(),nums.end());
        struct PairSum aux[size];
        int k=0;
        for(int i=0; i<n; i++)
        {
            for(int j=i+1; j<n; j++)
            {
                aux[k].sum = nums[i]+ nums[j];
                aux[k].firstIndex = i;
                aux[k].secondIndex = j;
                k++;
            }
        }
        qsort (aux, size, sizeof(aux[0]), compare);
        int i=0;
        int j=size-1;
        set<vector<int>> resultIndexes;
        while(i<j)
        {
            if(aux[i].sum+aux[j].sum == target && noCommon(aux[i],aux[j])==true)
            {
                    vector<int> temp;
                    temp.push_back(nums[aux[i].firstIndex]);
                    temp.push_back(nums[aux[i].secondIndex]);
                    temp.push_back(nums[aux[j].firstIndex]);
                    temp.push_back(nums[aux[j].secondIndex]);
                    sort(temp.begin(),temp.end());
                auto it = resultIndexes.find(temp);
                if(it == resultIndexes.end())
                {
                    res.push_back(temp);
                    resultIndexes.insert(temp);
                }
                i++;
                //j--;
            }
            else if(aux[i].sum+aux[j].sum < target)
            {
                i++;   
            }
            else
            {
                j--;
            }
        }
        return res;
	}
};