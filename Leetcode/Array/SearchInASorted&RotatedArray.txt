class Solution {
public:

    int find_pivot(vector<int>& arr, int low,int high)
    {
        if(low>high)
            return -1;
            
        if(low==high)
            return low;
            
        int mid=low+(high-low)/2;
        
        if(arr[mid]>arr[mid+1] && mid<high)
            return mid;
            
        if(arr[mid-1]>arr[mid] && low<mid)
            return mid-1;
            
        if(arr[low]>arr[mid])
            return find_pivot(arr,low,mid-1);
        else
            return find_pivot(arr,mid+1,high);
    }
    
    int binarysearch(vector<int>& arr,int low, int high, int key)
    {
       if (high < low)
            return -1;
       int mid = low + (high - low)/2;
       if (key == arr[mid])
           return mid;
       if (key > arr[mid])
           return binarysearch(arr, (mid + 1), high, key);
       return binarysearch(arr, low, (mid -1), key);
    }
    
    
    int search(vector<int>& nums, int target) {
        
        int n=nums.size();
        int pivot=find_pivot(nums,0,n-1);
        if(pivot==-1)
            return binarysearch(nums,0,n-1,target);
        if(nums[pivot]==target)
            return pivot;
            
        if(nums[0]<=target)
            return binarysearch(nums,0,pivot-1,target);
        else
            return binarysearch(nums,pivot+1,n-1,target);
        
    }
};