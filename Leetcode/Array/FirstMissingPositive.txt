//Given an unsorted integer array, find the first missing positive integer.
//For example,
//Given [1,2,0] return 3,
//and [3,4,-1,1] return 2.
//Your algorithm should run in O(n) time and uses constant space.

class Solution {
public:
    void swap(vector<int>& nums, int i, int j)
    {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    int firstMissingPositive(vector<int>& nums) 
    {
        if(nums.size()== 0)
            return 1;
        int n = nums.size();
        for(int i=0; i<n; i++)
        {
            while(nums[i] >0 && nums[i] <=n && nums[nums[i]-1] != nums[i])
            {
                swap(nums, nums[i]-1, i);
            }
        }
        
        for(int i=0; i<n; i++)
        {
            if(nums[i]!= i+1)
                return i+1;
        }
        return n+1;
    }
};