/*
There is a door to enter a restroom. Once you enter the restroom there are N toilets starting from 1, 2,... to N. The toilet which is near to entry door starts from 1 and then it serially goes till N. You can use toilet based on below conditions: 
1. If none of the toilets are occupied then choose one which is nearest to the entry door(which is toilet#1). 
2. If at least one toilet is occupied then choose that unoccupied toilet which is farthest from the occupied ones. 
3. If there are more than one unoccupied toilets whose farthest distance from the occupied ones are same then choose one which is near to the door. 

For example: 
Let's say there are 5 toilets. 
-> First person comes and occupies toilet#1(Based on rule#1). 
-> 2nd person comes and occupies toilet#5(Based on rule#2). 
-> 3rd person comes and occupies toilet#3(Based on rule#2). Note that the farthest distance would have been formed when the new person would have occupied toilet#2(or toilet#4) but with that, the distance between toilet#2(unoccupied) and toilet#1(occupied) would be just 1. 
-> 4th person comes in. Now from toilet#1 to toilet#5, only toilet#2 & toilet#4 are unoccupied. Now there are 2 toilets(#2 & #4) whose farthest distance from unoccupied ones are equal(=1). So rule#3 will apply and toilet#2 will be occupied. 

You have to find the sum of those toilet numbers which are occupied. 

So in above example after 4th person, toilet numbers which are occupied are #1, #5, #3 & #2. 
So answer would be 1+5+3+2 = 11.
*/


/*

We can store in a boolean array, the status (occupied / free) of every toilet. Find the distance between every pair of consecutive occupied toilets & report the mean of the indices of the pair with the maximum distance.

*/

int sumToilets(int people, int toilets)
{
    if(people > toilets)
    {
        return (toilets*(toilets+1))/2;
    }
    bool status = new bool[toilets];
    
    if(people == 0)
        return 0;
        
    status[0] = true;
  int sum= 1;
    if(people >= 2)
   {
	status[toilet-1]=true;
	sum = sum + toilet;

   }   
    
    
    for(int i=2; i<people; i++)
    {
        int previous = 0;
        int next;
        int maxDistance = 0;
        int maxDistanceStart = 0;
        
        for(int j=1; j<status.size(); j++)
        {
            if(status[j] == true)
            {
                next = j; //8
                if((next-previous) > maxDistance)
                {
                    maxDistance = next-previous; //4
                    maxDistanceStart = previous; //0
                }
                previous = j; //8
                
            }
        }
        
        int index = maxDistanceStart + maxDistance/2;
	 status[index] = true; //0,8,4,2
        sum= sum+ index+1;
    
    }
    return sum;


}



