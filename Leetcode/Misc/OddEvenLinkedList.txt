/**
 * Given a linked list, put all the odd elements in lexicographical order list in front of the even elements in lexicographical order in place.  

 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) 
    {
        if(head == NULL || head->next == NULL)
        return head;
        ListNode *odd = head;
        ListNode *even_head = head->next;
        ListNode *even = even_head;

        while(even != NULL && even->next != NULL)
        {
            //basically we are alternating pointers
           // 1->2->3->4->5->NULL
            //after odd->next = even->next 1->3 
            if((even->next->val)%2 == 0)
                throw new InvalidParameterException();
         
            odd->next = even->next;
            //odd is now at 3
            odd = odd->next;
           
            if((odd->next->val)%2 != 0)
                throw new InvalidParameterException();
            
            even->next = odd->next;
            even = even->next;
        }
        odd->next = even_head;
        head = quickSort(head);
        return head;
    }
    
    ListNode* partition(ListNode* head, ListNode* end, ListNode** newHead, ListNode** newEnd)
    {
        ListNode* pivot = end;
        ListNode* prev = NULL;
        ListNode* curr = head;
        ListNode* tail = end;
        while(curr != pivot)
        {
            if(curr->val < pivot->val)
            {
                if(*newHead == NULL)
                {
                    *newHead = curr;
                }
                prev = curr;
                curr = curr->next;
            }
            else
            {
                if(prev != NULL)
                {
                    prev->next = curr->next;
                    
                }
                ListNode* temp = curr->next;
                curr->next = NULL;
                tail->next = curr;
                tail = curr;
                curr = temp;
            }
        }
        // If the pivot data is the smallest element in the current list,
        // pivot becomes the head
        if ((*newHead) == NULL)
            (*newHead) = pivot;

        // Update newEnd to the current last node
        (*newEnd) = tail;

        // Return the pivot node
        return pivot;
    }
    
    ListNode* quickSortRecur(ListNode* head, ListNode* tail)
    {
        if (!head || head == tail)
            return head;
        ListNode* newHead= NULL;
        ListNode* newTail = NULL;
        ListNode* pivot = partition(head, tail, &newHead, &newTail);
        
        if(newHead != pivot)
        {
            ListNode* temp = newHead;
            while(temp->next != pivot)
            {
                temp= temp->next;
            }
            temp->next = NULL;
            newHead = quickSortRecur(newHead, temp);
            ListNode* current = newHead;
            while(current->next != NULL)
            {
                current = current->next;
            }
            current->next = pivot;
        }
        
        pivot->next = quickSortRecur(pivot->next, newTail);
        return newHead;
    }
    
    int getCount(ListNode* head)
    {
        ListNode* curr = head;
        int count =0;
        while(curr != NULL)
        {
            curr = curr->next;
            count++;
        }
        return count;
    }
    //Quick sort
    ListNode* quickSort(ListNode* head)
    {
        int n = getCount(head);
        int count = n;
        ListNode* current = head;
        
        while(count > (n/2 + 1))
        {
            current = current->next;
            count--;
        }
        
        ListNode* evenHead = current->next;
        current->next = NULL;
        cout<<evenHead->val<<endl;
        ListNode* oddHead = quickSortRecur(head, current);
        
        ListNode *evenTail = evenHead;
        while(evenTail->next != NULL)
        {
            evenTail = evenTail->next;
        }
        evenHead = quickSortRecur(evenHead, evenTail);
        
        ListNode *oddTail = oddHead;
        while(oddTail->next != NULL)
        {
            oddTail = oddTail->next;
        }
        oddTail->next = evenHead;
        return oddHead;
    }
};