/*class Solution {
public:
    bool shouldFlip(vector<vector<char>>& board, vector<vector<bool> >&visited, int i, int j)
    {
        int row = board.size();
        int col = board[0].size();
        visited[i][j] = true;
        
        bool result=true;
        
        if(i == 0 || i== row-1 || j == 0 || j == col-1) //reached edge
            return false;
        
        //once we have confirmed that the cell is not at the edge of the matrix we will do DFS on its neighbors
        //board[1][1] = 0 so when we look at its neighbors we see board[1][2] = 0 so we try to see neighbors of board[1][2] by DFS and try to flip it if we can
        
        if(board[i-1][j] == 'O' && !visited[i-1][j])
            result = result & shouldFlip(board, visited, i-1, j);
        
        if(board[i+1][j] == 'O' && !visited[i+1][j])
            result = result & shouldFlip(board, visited, i+1, j);
        
        if(board[i][j-1] == 'O' && !visited[i][j-1])
            result = result & shouldFlip(board, visited, i, j-1);
        
        if(board[i][j+1] == 'O' && !visited[i][j+1])
            result = result & shouldFlip(board, visited, i, j+1);
        
        if(result)
            board[i][j]='X';
        return result;
    }
    
    void solve(vector<vector<char>>& board) 
    {
        if(board.empty())
            return;
        int row = board.size();
        int col = board[0].size();
        std::vector<std::vector<bool>> visited(row, std::vector<bool>(col, false));
        for(int i=0; i<row; i++)
        {
            for(int j=0; j<col; j++)
            {
                if(!visited[i][j] && board[i][j] == 'O')
                {
                    if(shouldFlip(board, visited, i, j))
                        board[i][j] = 'X';
                }
            }
        }
    }
};*/