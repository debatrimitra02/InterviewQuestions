#include <iostream>
#include<vector>

using namespace std;

bool isValid(vector<vector<char>> matrix, int i, int j, int prevX, int prevY, int currX, int currY)
{
    int row = matrix.size();
    int col = matrix[0].size();
    return (i >=0 && i< row && j>=0 && j< col && !(i== prevX && j== prevY) && !(i== currX && j==currY));
}

bool DFS(vector<vector<char>> matrix, 
            string str, 
            int currX, 
            int currY, 
            int prevX, 
            int prevY, 
            int index)
{
    int row = matrix.size();
    int col = matrix[0].size();
    if(index >= str.length() || matrix[currX][currY] != str[index])
        return false;
    if(index == str.length()-1)
    {
        return true;
    }
       
    for(int i = currX-1; i<= currX +1; i++)
    {
        for(int j = currY-1; j<= currY+1; j++)
        {
            if(isValid(matrix, i, j, prevX, prevY, currX, currY))
            {
                bool flag = DFS(matrix, str, i, j, currX, currY, index+1);
                if(flag)
                    return true;
            }
        }
    }
   return false; 
}

void findWords(string str, vector<vector<char>> matrix)
{
    if(str.length() == 0)
        return;
    if(matrix.empty())
        return;
    int row = matrix.size();
    int col = matrix[0].size();
    for(int i=0; i<row; i++)
    {
        for(int j=0; j<col; j++)
        {
            if(matrix[i][j] == str[0])
            {
               bool res =  DFS(matrix, str, i, j, -1, -1, 0);
               if(res)
                    cout<<"Pattern found at"<<" "<<i<<","<<j<<endl;
            }
        }
    }
    
    
}


int main()
{
   vector<vector<char>> matrix = { {'B', 'N', 'E', 'Y', 'S'},
                                   {'H', 'E', 'D', 'E', 'S'},
                                   {'S', 'G', 'N', 'D', 'E'}
                        };
                        
    string str = "DES";
    findWords(str, matrix);
    return 0;
}
