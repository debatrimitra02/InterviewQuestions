/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode * minValueNode(TreeNode* node)
    {
        TreeNode* current = node;

        /* loop down to find the leftmost leaf */
        while (current->left != NULL)
            current = current->left;

        return current;
    }
    
    TreeNode* deleteNode(TreeNode* root, int key) 
    {
        if(root == NULL)
            return NULL;
        
        if (key < root->val)
            root->left = deleteNode(root->left, key);
 
    // If the key to be deleted is greater than the root's key,
    // then it lies in right subtree
        else if (key > root->val)
            root->right = deleteNode(root->right, key);
 
    // if key is same as root's key, then This is the node
    // to be deleted
        else
        {
            // node with only one child or no child
            if (root->left == NULL)
            {
                TreeNode *temp = root->right;
                free(root);
                return temp;
            }
            else if (root->right == NULL)
            {
                TreeNode *temp = root->left;
                free(root);
                return temp;
            }

            // node with two children: Get the inorder successor (smallest
            // in the right subtree)
            TreeNode* temp = minValueNode(root->right);

            // Copy the inorder successor's content to this node
            root->val = temp->val;

            // Delete the inorder successor
            root->right = deleteNode(root->right, temp->val);
        }
        return root;


        }
};