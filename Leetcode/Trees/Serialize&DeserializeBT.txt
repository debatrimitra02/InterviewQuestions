/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

/*
How to store a general Binary Tree?
A simple solution is to store both Inorder and Preorder traversals. This solution requires requires space twice the size of Binary Tree.
We can save space by storing Preorder traversal and a marker for NULL pointers.
*/
class Codec {
public:

   string serialize(TreeNode* root) 
   {
        if (root == NULL) return "#";
        return to_string(root->val)+","+serialize(root->left)+","+serialize(root->right);
   }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) 
    {
        return mydeserialize(data);
    }
    TreeNode* mydeserialize(string& data) 
    {
        if (data[0]=='#') 
        {
            if(data.size() > 1) data = data.substr(2);
            return NULL;
        } 
        else
        {
            TreeNode* node = new TreeNode(helper(data));
            node->left = mydeserialize(data);
            node->right = mydeserialize(data);
            return node;
        }
    }
private:
    int helper(string& data) {
        int pos = data.find(',');
        int val = stoi(data.substr(0,pos));
        data = data.substr(pos+1);
        return val;
    }
};

// Your Codec object will be instantiated and called as such:
// Codec codec;
// codec.deserialize(codec.serialize(root));