/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

class TrieNode
{
    map<char, TrieNode*> children;
    bool EOS;
}

class TrieNode{
    TrieNode* root;
    
    
    void insert(string word) 
    {
        TrieNode* current = this->root;

        for(int i=0; i < word.length(); i++)
        {
           char ch = word[i];
           auto it = current->Children.find(ch);
           
           if(it == current->Children.end())
           {
               lock(current);
               TrieNode* node = new TrieNode();
               current->Children[ch] = node;
               unlock(current);
               current = node;
           }
           
           else { current = it->second; }
        }
        current->EOS = true;       
    }
    
    void suggestionRecur(TrieNode* current, string prefix, vector<string>& res)
    {
        if(current->EOS)
        {
            res.push_back(prefix);
        }
        
        if(isLastNode(current))
            return;
            
        lock(current);
        for(int i=0; i<26; i++)
        {
            if(current->children[i])
            {
                prefix.append(i + 'a');
                suggestionRecur(current->children[i], prefix, res);
            }
        }
        unlock(current);
    }
    
    vector<string> autoComplete(TrieNode* root, const string query)
    {
        TrieNode* current = root;
        vector<string> res;
        if(root == NULL)
            return res;
            
        for(int i=0; i<query.length(); i++)
        {
            char ch = query[i];
            auto it = current->children.find(ch);
            if(it == current->children.end())
                return res;
            current = it->second;
        }
        
        bool isWordEnd = false;
        if(current->EOS == true)
            isWordEnd = true;
        
        bool isLastWord = isLastNode(current);
        
        if(isLastNode && isWordEnd)
        {
            res.push_back(query);
            return res;
        }
        
        if(!isLastNode)
        {
            string prefix = query;
            suggestionRecur(current, prefix, res);
            return res;
        }
    }
}