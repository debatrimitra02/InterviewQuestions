#include <iostream>
#include<string>
#include<algorithm>
#include<string>



using namespace std;

bool allNine(string num)
{
    for(int i=0; i<num.length(); i++)
    {
        if(num[i] != '9')
            return false;
    }
    return true;
}

int strtoi(string str)
{
    int res=0;
    for(int i=0; i<str.length(); i++)
    {
        res = res*10 + (str[i] - '0');
    }
    return res;
}

string reverse(string str)
{
    string res;
    int i = str.length() -1;
    while(i>= 0)
    {
        res= res + str[i];
        i--;
    }
    return res;
}

int nextPalindrome(int num)
{
    if(num < 10)
        return 11;
        
    string number = to_string(num);
    
    if(allNine(number))
        return num + 2;
    
    int n= number.length();
    
    int mid = n/2; //odd-5/2 = 2 even-6/2=3 
        
    string firstHalf = number.substr(0, mid);
    
    string mirror;
    mirror = reverse(firstHalf);
    
    string str;
    
    if(n%2 == 0)
    {
         str = firstHalf + mirror;
    }
    else
    {
         str = firstHalf+ number[mid] + mirror;
     }
    
    
    if(strtoi(str) < num)
    {
        
        if(n%2 != 0)
        {
            //12345 —12321<12345 -12421
            int x = strtoi(firstHalf+number[mid]);
            x= x+1;
            firstHalf = to_string(x).substr(0, mid); //to handle the scenario where 12921—> x=130 so we will have to compute first half again. First half will be 13
            string s = to_string(x) + reverse(firstHalf);
            return strtoi(s);
        }
        
        else
        {
            int x =  strtoi(firstHalf); 1234 -> 1331
            x = x+1;
            firstHalf = to_string(x);
            return strtoi(firstHalf + reverse(firstHalf));
        }
        
    }
    else
    {
        return strtoi(str);
    }
}



int main() {
	int num = 999;
	int res;
	res = nextPalindrome(num);
	cout<<res;
}
