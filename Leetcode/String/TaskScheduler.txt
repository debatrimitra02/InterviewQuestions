class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        
        if(tasks.empty())
            return 0;
        unordered_map<char, int>taskFreq;
        for(char task : tasks)
            taskFreq[task]++;
        
        priority_queue<pair<int,char>> pq; //maxheap
        
        for(auto it=taskFreq.begin(); it!=taskFreq.end(); it++)
        {
            pq.push(make_pair(it->second, it->first));
        }
        int allTime=0;
        while(!pq.empty())
        {
            vector<pair<int, char>> temp;
            int time=0;
            
            for(int i=0; i<=n; i++)
            {
                if(!pq.empty())
                {
                    temp.push_back(pq.top());
                    pq.pop();
                    time++;
                }
                
            }
            for(int i=0; i<temp.size(); i++)
            {
                temp[i].first--;
                if(temp[i].first != 0)
                    pq.push(make_pair(temp[i].first, temp[i].second));
            }
            allTime += pq.empty() ? time : n+1;
        }
        
        return allTime;
        
    }
};