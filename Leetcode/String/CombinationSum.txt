/*

Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]

*/

class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) 
    {
        vector<vector<int>> result;
        if(candidates.empty())
            return result;
        
        vector<int> state;
        sumRecursive(candidates, state, result, target, 0);
        return result;
    }
    
    void sumRecursive(vector<int>& candidates, vector<int>& currentState, vector<vector<int>>& result, int target, int start)
    {
        if(target == 0)
        {
            result.push_back(currentState);
            return;
        }
        if(target < 0)
            return;
        
        for(int i=start; i<candidates.size(); i++)
        {
            currentState.push_back(candidates[i]);
            sumRecursive(candidates,currentState, result, target-candidates[i], i);
            currentState.pop_back();
        }
    }
};