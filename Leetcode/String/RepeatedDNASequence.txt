From the discussion above, we know that to solve the given problem, we need to count the number of characters with odd number of occurences in the given string ss. To do so, we can also make use of a hashmap, mapmap. This mapmap takes the form (character_i, number of occurences of character_i)(character
​i
​​ ,numberofoccurencesofcharacter
​i
​​ ).

We traverse over the given string ss. For every new character found in ss, we create a new entry in the mapmap for this character with the number of occurences as 1. Whenever we find the same character again, we update the number of occurences appropriately.

At the end, we traverse over the mapmap created and find the number of characters with odd number of occurences. If this countcount happens to exceed 1 at any step, we conclude that a palindromic permutation isn't possible for the string ss. But, if we can reach the end of the string with countcount lesser than 2, we conclude that a palindromic permutation is possible for ss.


public class Solution {
 public boolean canPermutePalindrome(String s) {
     HashMap < Character, Integer > map = new HashMap < > ();
     for (int i = 0; i < s.length(); i++) {
         map.put(s.charAt(i), map.getOrDefault(s.charAt(i), 0) + 1);
     }
     int count = 0;
     for (char key: map.keySet()) {
         count += map.get(key) % 2;
     }
     return count <= 1;
 }
}

Instead of making use of the inbuilt Hashmap, we can make use of an array as a hashmap. For this, we make use of an array mapmap with length 128. Each index of this mapmap corresponds to one of the 128 ASCII characters possible.

We traverse over the string ss and put in the number of occurences of each character in this mapmap appropriately as done in the last case. Later on, we find the number of characters with odd number of occurences to determine if a palindromic permutation is possible for the string ss or not as done in previous approaches.


Another modification of the last approach could be by making use of a setset for keeping track of the number of elements with odd number of occurences in ss. For doing this, we traverse over the characters of the string ss. Whenver the number of occurences of a character becomes odd, we put its entry in the setset. Later on, if we find the same element again, lead to its number of occurences as even, we remove its entry from the setset. Thus, if the element occurs again(indicating an odd number of occurences), its entry won't exist in the setset.

Based on this idea, when we find a character in the string ss that isn't present in the setset(indicating an odd number of occurences currently for this character), we put its corresponding entry in the setset. If we find a character that is already present in the setset(indicating an even number of occurences currently for this character), we remove its corresponding entry from the setset.

At the end, the size of setset indicates the number of elements with odd number of occurences in ss. If it is lesser than 2, a palindromic permutation of the string ss is possible, otherwise not.