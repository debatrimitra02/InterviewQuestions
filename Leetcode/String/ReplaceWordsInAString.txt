In English, we have a concept called root, which can be followed by some other words to form another longer word - let's call this word successor. For example, the root an, followed by other, which can form another word another.

Now, given a dictionary consisting of many roots and a sentence. You need to replace all the successor in the sentence with the root forming it. If a successor has many roots can form it, replace it with the root with the shortest length.

You need to output the sentence after the replacement.

Example 1:
Input: dict = ["cat", "bat", "rat"]
sentence = "the cattle was rattled by the battery"
Output: "the cat was rat by the bat"



class Solution {
public:
    string replaceWords(vector<string>& dict, string sentence) 
    {
        string result;
        set<string> dicts;
        for(int i=0; i<dict.size(); i++)
        {
            dicts.insert(dict[i]);
        }
        for(int i=0; i<sentence.length(); i++)
        {
            while(i<sentence.length() && sentence[i]==' ')
                i++;
            string prefix;
            
            while(i< sentence.length() && sentence[i]!=' ')
            {
                prefix += sentence[i];
                auto it = dicts.find(prefix);
                i++;
                if(it != dicts.end())
                {
                    break;
                }
            }
            
            result += prefix + " ";
            
            while(sentence[i] != ' ' && i<sentence.length())
                i++;
           
        }
        return result.substr(0, result.length()-1);
    }
};