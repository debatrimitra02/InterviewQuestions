public int minMeetingRooms(Interval[] intervals) {
    if(intervals==null||intervals.length==0)
        return 0;
 
    Arrays.sort(intervals, new Comparator<Interval>(){
        public int compare(Interval i1, Interval i2){
            return i1.start-i2.start;
        }
    });
 
    PriorityQueue<Integer> queue = new PriorityQueue<Integer>();
    int count=1;
    queue.offer(intervals[0].end);
 
    for(int i=1; i<intervals.length; i++){
        if(intervals[i].start<queue.peek()){
            count++;
 
        }else{
            queue.poll();
        }
 
        queue.offer(intervals[i].end);
    }
 
    return count;
}


—————————————————————————————————————————————
struct Meeting {
	int start;
	int end;
	Meeting(int s, int e) {start=s; end=e;}
};

bool mysortfunc(Meeting a, Meeting b) { return a.end<b.end; }

int compute_min_confrooms(vector<Meeting>& meetings)
{
	// sort meetings w.r.t. their end times
	sort(meetings.begin(),meetings.end(),mysortfunc);

	int peak = 0;
	queue<Meeting> Q;
	Q.push(meetings[0]);
	for(int i=1; i<meetings.size(); i++) {
//non-overlapping so pop out of the queue
		while(!Q.empty() && Q.front().end < meetings[i].start) { Q.pop(); }
		Q.push(meetings[i]);
		peak = max(peak, (int)Q.size());
	}

	return peak;
}