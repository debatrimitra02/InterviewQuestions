/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    
    ListNode* reverseList(ListNode* head) {
        
        ListNode* previous=NULL;
        ListNode* current=head;
        ListNode* next;
        
        while(current!=NULL)
        {
            next=current->next;
            current->next=previous;
            previous=current;
            current=next;
        }
        
        head=previous;
        
        return head;
    }
    
    ListNode* reverseBetween(ListNode* head, int m, int n) 
    {
        if(head == NULL)
            return NULL;
        
        ListNode* dummy = new ListNode(0);
        dummy->next = head;
        
        
      //Input:  1->2->3->4->5->NULL  Output: 1->4->3->2->5->NULL
        //1: We are saving the address of node 1 in prev and node 2 in newHead
        //2. severe the link between 1 and 2
        //3. Now go to the tail and save address of 5 and severe link with the midHalf. Now we have 3 Linked List 1, 2->3->4, 5
        //4. Reverse 2->3->4  and then attach the rest to it.
        
        
        ListNode* prev=dummy;
        for(int i=0; i<m-1; i++)
            prev = prev->next;
        
        ListNode* newHead = prev->next;
        prev->next = NULL;
        ListNode* end = newHead;
        for(int i=0; i<n-m; i++)
        {
            end = end->next;
        }
        ListNode* tail = end->next;
        end->next = NULL;
        
        newHead = reverseList(newHead);
        prev->next = newHead;
        end = newHead;
        while(end->next != NULL)
            end= end->next;
        
        end->next = tail;
        
        return dummy->next;
    }
};