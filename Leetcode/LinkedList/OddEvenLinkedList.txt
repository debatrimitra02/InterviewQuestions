/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* oddEvenList(ListNode* head) 
    {
        if(head == NULL || head->next == NULL)
        return head;
        ListNode *odd = head;
        ListNode *even_head = head->next;
        ListNode *even = even_head;

        while(even != NULL && even->next != NULL)
        {
            //basically we are alternating pointers
           // 1->2->3->4->5->NULL
            //after odd->next = even->next 1->3 
            odd->next = even->next;
            //odd is now at 3
            odd = odd->next;
            even->next = odd->next;
            even = even->next;
        }
        odd->next = even_head;
        head = mergeSort(head);
        return head;
    }

    int getCount(ListNode* head)
    {
        ListNode* curr = head;
        int count =0;
        while(curr != NULL)
        {
            curr = curr->next;
            count++;
        }
        return count;
    }
    
     ListNode* merge( ListNode* head1 , ListNode * head2){
        ListNode* d = new ListNode (0);            // dummy node
        ListNode* e = d;
        while(head1||head2){
            if(head1 && (!head2 || head1->val <= head2 -> val) ){
                e=e->next= head1 ; 
                head1 = head1 -> next;
            }
            if(head2 && (!head1 || head2->val < head1 -> val) ){
                e=e->next= head2 ; 
                head2 = head2 -> next;
            }
        }
        e->next = NULL;
        return d->next;
    }
    
    ListNode* sortList(ListNode* head) 
    {
        if(!head || !head->next) return head;
        ListNode* slow = head;
        ListNode* fast =head->next;
         while(fast && fast->next){         // to find middle node     
            fast= fast->next->next;
            slow = slow->next;
        }
        ListNode* headb = slow->next;     // headb is start of 2nd half of list
        slow->next = NULL;                 
        return merge(sortList(head) , sortList(headb));
    }
    
    //Quick sort
    ListNode* mergeSort(ListNode* head)
    {
        int n = getCount(head);
        int count = n;
        ListNode* current = head;
        
        while(count > (n/2 + 1))
        {
            current = current->next;
            count--;
        }
        
        ListNode* evenHead = current->next;
        current->next = NULL;
        head = sortList(head);
        evenHead = sortList(evenHead);
        current = head;
        while(current->next != NULL)
            current = current->next;
        current->next = evenHead;
        
        return head;
    }
};