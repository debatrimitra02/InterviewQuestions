class Solution {
public:
    int change(int amount, vector<int>& coins) 
    {
        if(amount == 0)
            return 1;
        if(coins.size() == 0)
            return 0;
        vector<int> dp(amount + 1, 0);
        dp[0] = 1;
        for(int i = 0; i < coins.size(); ++ i){
            for(int j = coins[i]; j <= amount; ++ j){
                dp[j] += dp[j - coins[i]];
            }
        }
        return dp[amount];
    }
};
/////////////////////////////////////////////////////////////

class Solution {
public:
    int change(int amount, vector<int>& coins) 
    {
        if(coins.empty())
            return 0;
        long temp[coins.size()+1][amount+1];
        memset(temp, 0, sizeof(temp));
        for(int i=0; i<= coins.size(); i++)
            temp[i][0] = 1;
        
        for(int i=1; i<= coins.size(); i++)
        {
            for(int j=1; j<= amount; j++)
            {
                if(coins[i-1] > j)
                    temp[i][j] = temp[i-1][j];
                else //the denomination of coin is less than the amount to be made
                {
                    //temp[i][j - coins[i-1]] so if j is 5 and coins[i-1]= 2 then temp[i][j-coins[i-1]] will have the total number of ways 3 can be formed.
                    temp[i][j] = temp[i-1][j] + temp[i][j - coins[i-1]];
                }
            }
        }
        return (int)temp[coins.size()][amount];
    }
};