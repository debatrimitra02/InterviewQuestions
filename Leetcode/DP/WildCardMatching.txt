

// ‘?’ Matches any single character.
// ’*’ Matches any sequence of characters (including the empty sequence).

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "*") → true
isMatch("aa", "a*") → true
isMatch("ab", "?*") → true
isMatch("aab", "c*a*b") → false

class Solution {
public:
    bool isMatch(string s, string p) {
        
        if(s.empty() && p.empty())
            return true;
        
        int row = s.length();
        int column = p.length();
        bool arr[row+1][column+1];
        memset(arr, false, sizeof(arr));
        
        
            
        
        arr[0][0]=true;
        
        for(int i=1; i<= column; i++)
        {
            if(p[i-1] == '*')
            {
                arr[0][i] = arr[0][i-1]; // * and empty sequence matches
            }
        }
        
        for(int i=1; i<=row; i++)
        {
            for(int j=1; j<=column; j++)
            {
                if((s[i-1]==p[j-1]) || (p[j-1])=='?')
                   {
                       arr[i][j] = arr[i-1][j-1];
                   }
                   
                 else if (p[j-1]=='*')
                   {
                       arr[i][j] = arr[i-1][j] || arr[i][j-1];
                   }
                   else
                        arr[i][j] = false;
            }
        }
        
         return arr[row][column];   
        
    }
};