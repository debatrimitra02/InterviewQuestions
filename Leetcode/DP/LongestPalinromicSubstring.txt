class Solution {
public:
    string longestPalindrome(string s) 
    {
        if(s.length() == 0)
            return "";
        int n = s.length();
        bool arr[n][n];
        memset(arr, false, sizeof(arr));
        
        //set all substrings of length 1 as true
        for(int i=0; i<n; i++)
        {
            arr[i][i] = true;
        }
        int start=0;
        int maxLength = 1;
    
        //check for substrings of length 2
        for(int i=0; i<n; i++)
        {
            if(s[i] == s[i+1])
            {
                 arr[i][i+1] = true;
                 start = i;
                 maxLength = 2;
            }
        }
        
        //check for lengths more than 3
        for(int k=3; k<=n; k++)
        {
            //fix starting index
            
                for(int i=0; i<n-k+1; i++)
                {
                    int j = i+k-1;
                    if(arr[i+1][j-1] && s[i]==s[j])
                    {
                        arr[i][j] = true;
                        
                        if (k > maxLength)
                        {
                            start = i;
                            maxLength = k;
                        }
                    }
                }
        }
        
            return s.substr(start, maxLength);
    }
};