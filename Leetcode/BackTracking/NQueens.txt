class Solution {
public:

    vector<vector<string>> solveNQueens(int n) {
      
        vector<vector<string> > result;
        if(n==0)
            return result;
        vector<vector<int>> board;
        for(int i=0;i<n;i++)
        {
            vector<int> t;
            for(int j=0;j<n;j++)
            {
                t.push_back(0);
            }
            board.push_back(t);
        }
        solveNQueensUtil(result, board, 0);
        return result;
    }
    
    bool isSafe(vector<vector<int>> board, int i, int j)
    {
        //process left side till column
        for(int x=0; x<j; x++)
        {
            if(board[i][x] == 1)
            {
              return false;  
            }  
        }
        int x; 
        int y;
        //top left diagonal
        for(x= i, y=j; x>=0 && y>=0; x--, y--)
        {
            if(board[x][y] == 1)
            {
                return false;
            }
        }
        
        //bottom left diagonal
        
        for(x= i, y=j; x< board.size() && y>=0; x++, y--)
        {
            if(board[x][y] == 1)
            {
                return false;
            }
        }
        return true;
            
    }
    void solveNQueensUtil(vector<vector<string> >& result, vector<vector<int>>& board, int column)
    {
        //exit criteria
        
        if(column==board[0].size())
        {
            vector<string> temp;
            for(int i=0; i<board.size(); i++)
            {
                string str;
                for(int j=0; j<board[i].size(); j++)
                {
                    if(board[i][j] == 1)
                    {
                        str = str + 'Q';
                    }
                    else
                    {
                        str = str + '.';
                    }
                        
                }
                temp.push_back(str);
            }
            result.push_back(temp);
        }
        
        for(int i=0; i<board.size(); i++)
        {
            if(isSafe(board, i, column))
            {
                board[i][column] = 1;
                
                solveNQueensUtil(result,board,column+1);
                
                board[i][column] = 0;
            }
        }
    }
};